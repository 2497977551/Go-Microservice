// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopServerClient is the client API for ShopServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServerClient interface {
	Shop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponse, error)
}

type shopServerClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServerClient(cc grpc.ClientConnInterface) ShopServerClient {
	return &shopServerClient{cc}
}

func (c *shopServerClient) Shop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponse, error) {
	out := new(ShopResponse)
	err := c.cc.Invoke(ctx, "/test.ShopServer/Shop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServerServer is the server API for ShopServer service.
// All implementations must embed UnimplementedShopServerServer
// for forward compatibility
type ShopServerServer interface {
	Shop(context.Context, *ShopRequest) (*ShopResponse, error)
	mustEmbedUnimplementedShopServerServer()
}

// UnimplementedShopServerServer must be embedded to have forward compatible implementations.
type UnimplementedShopServerServer struct {
}

func (UnimplementedShopServerServer) Shop(context.Context, *ShopRequest) (*ShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shop not implemented")
}
func (UnimplementedShopServerServer) mustEmbedUnimplementedShopServerServer() {}

// UnsafeShopServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServerServer will
// result in compilation errors.
type UnsafeShopServerServer interface {
	mustEmbedUnimplementedShopServerServer()
}

func RegisterShopServerServer(s grpc.ServiceRegistrar, srv ShopServerServer) {
	s.RegisterService(&ShopServer_ServiceDesc, srv)
}

func _ShopServer_Shop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServerServer).Shop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.ShopServer/Shop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServerServer).Shop(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopServer_ServiceDesc is the grpc.ServiceDesc for ShopServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.ShopServer",
	HandlerType: (*ShopServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shop",
			Handler:    _ShopServer_Shop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
